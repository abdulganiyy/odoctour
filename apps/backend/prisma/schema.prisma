// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}


model User {
  id    String     @default(uuid()) @id
  email String  @unique
  username  String?
  phone  String?
  firstname  String
  lastname  String
  password String
  status String?
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  meetings Meeting[]
  Bookings Booking[]
  documents Document[]
  profilePicture  Document?  @relation("ProfilePicture", fields: [profilePictureId], references: [id])
  profilePictureId String?   @unique   
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Role {
  id       String     @default(uuid()) @id
  name     String
  users    User[]
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Meeting {
  id       String     @default(uuid()) @id
  name     String
  type      String
  url String?
  duration Int
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  Bookings Booking[]
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Booking {
  id       String     @default(uuid()) @id
  name     String
  description     String
  meeting Meeting @relation(fields: [meetingId], references: [id]) //patient
  meetingId String
  date DateTime
  time DateTime
  user      User      @relation(fields: [userId], references: [id]) //patient
  userId    String
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()

}

model Document {
  id       String     @default(uuid()) @id
  type     String
  url String
  filename String
  mimetype String
  uploadedBy      User       @relation(fields: [uploadedById], references: [id])
  uploadedById    String  
  userProfilePicture User? @relation("ProfilePicture")
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()

}

enum DocumentType {
  PHOTO
  PDF
  DOC
  OTHER
}